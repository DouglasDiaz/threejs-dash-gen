// Generated by CoffeeScript 1.6.3
(function() {
  var connect, data, dbFile, fs, getData, getPageListFromFiles, getPageListFromJSON, localServerPort, ncp, pages, phantom, prepareDocuments, server, sqlite3, startLocalServer, util, vm, writeSQLite;

  fs = require('fs');

  vm = require('vm');

  util = require('util');

  ncp = require('ncp').ncp;

  connect = require('connect');

  phantom = require('phantom');

  sqlite3 = require('sqlite3').verbose();

  pages = [];

  data = [];

  dbFile = 'threejs.docset/Contents/Resources/docSet.dsidx';

  server = null;

  localServerPort = 9999;

  startLocalServer = function() {
    server = connect().use(connect["static"]('three.js/docs')).listen(localServerPort);
    return console.log("Local server started at http://localhost:" + localServerPort);
  };

  prepareDocuments = function(callback) {
    var _rmrf;
    _rmrf = function(path) {
      var _fileList;
      _fileList = fs.readdirSync(path);
      _fileList.forEach(function(file, index) {
        var filePath;
        filePath = "" + path + "/" + file;
        if (fs.statSync(filePath).isFile()) {
          return fs.unlinkSync(filePath);
        } else if (fs.statSync(filePath).isDirectory()) {
          return _rmrf(filePath);
        }
      });
      return fs.rmdirSync(path);
    };
    _rmrf('threejs.docset/Contents/Resources/Documents');
    return ncp('three.js/docs', 'threejs.docset/Contents/Resources/docs', function(err) {
      if (err) {
        throw err;
      }
      fs.renameSync('threejs.docset/Contents/Resources/docs', 'threejs.docset/Contents/Resources/Documents');
      console.log('Preparation on Documents is done!');
      if (callback != null) {
        return callback();
      }
    });
  };

  getPageListFromFiles = function() {
    var collectHTMLFiles, docRoot, urlList;
    docRoot = 'threejs.docset/Contents/Resources/Documents/api';
    urlList = [];
    collectHTMLFiles = function(path) {
      var item, _dirContent, _i, _len, _results;
      _dirContent = fs.readdirSync(path);
      _results = [];
      for (_i = 0, _len = _dirContent.length; _i < _len; _i++) {
        item = _dirContent[_i];
        if (/^\./.test(item)) {

        } else if (/\.html|\.htm$/i.test(item)) {
          _results.push(urlList.push(("" + path + "/" + item).replace(new RegExp('^threejs\\.docset\\/Contents\\/Resources\\/Documents\\/', 'gi'), '')));
        } else {
          _results.push(collectHTMLFiles("" + path + "/" + item));
        }
      }
      return _results;
    };
    collectHTMLFiles(docRoot);
    return urlList;
  };

  getPageListFromJSON = function() {
    var grabURLFromJSON, listJsContent, urlList, _data;
    _data = {};
    urlList = [];
    listJsContent = fs.readFileSync('threejs.docset/Contents/Resources/Documents/list.js');
    vm.runInNewContext(listJsContent, _data);
    grabURLFromJSON = function(obj) {
      var i, _results;
      _results = [];
      for (i in obj) {
        if (typeof obj[i] === 'object') {
          _results.push(grabURLFromJSON(obj[i]));
        } else {
          _results.push(urlList.push(obj[i] + '.html'));
        }
      }
      return _results;
    };
    grabURLFromJSON(_data.pages.Reference);
    return urlList;
  };

  getData = function(urlList, callback) {
    var _i;
    _i = 0;
    return phantom.create(function(ph) {
      return ph.createPage(function(page) {
        var _readPage;
        _readPage = function() {
          return page.open("http://localhost:" + localServerPort + "/" + urlList[_i], function(status) {
            return page.evaluate((function() {
              return document.querySelector('h1').innerHTML;
            }), function(result) {
              data.push({
                $name: result,
                $type: 'Class',
                $path: urlList[_i]
              });
              if (++_i < urlList.length) {
                return _readPage();
              } else {
                ph.exit();
                if (callback != null) {
                  return callback();
                }
              }
            });
          });
        };
        return _readPage();
      });
    });
  };

  writeSQLite = function(data) {
    var db, progress, writeCount;
    writeCount = 0;
    db = null;
    progress = function(isRecordAdded) {
      if (isRecordAdded) {
        writeCount++;
      }
      if (writeCount === data.length) {
        console.log('Finished writing db.');
        db.close();
        server.close();
        return process.exit();
      }
    };
    return fs.unlink(dbFile, function() {
      db = new sqlite3.Database(dbFile);
      return db.serialize(function() {
        var item, _i, _len, _results;
        db.run("CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT);");
        db.run("CREATE UNIQUE INDEX anchor ON searchIndex (name, type, path);");
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          item = data[_i];
          if (item.$name != null) {
            _results.push(db.run("INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES (?, ?, ?);", [item.$name, item.$type, item.$path], function() {
              return progress(true);
            }));
          } else {
            _results.push(progress(true));
          }
        }
        return _results;
      });
    });
  };

  startLocalServer();

  prepareDocuments(function() {
    var urlList;
    urlList = getPageListFromJSON();
    return getData(urlList, function() {
      return writeSQLite(data);
    });
  });

}).call(this);
