// Generated by CoffeeScript 1.8.0
(function() {
  var Q, connect, dbFile, es, fs, getData, getPageListFromFiles, getPageListFromJSON, injectFiles, localServerPort, ncp, phantom, prepareDocuments, server, sqlite3, startLocalServer, util, vm, writeSQLite;

  Q = require('q');

  fs = require('fs');

  vm = require('vm');

  util = require('util');

  ncp = require('ncp').ncp;

  es = require('event-stream');

  connect = require('connect');

  phantom = require('phantom');

  sqlite3 = require('sqlite3').verbose();

  dbFile = 'threejs.docset/Contents/Resources/docSet.dsidx';

  server = null;

  localServerPort = 9999;

  startLocalServer = function() {
    server = connect().use(connect["static"]('three.js/docs')).listen(localServerPort);
    return console.log("Local server started at http://localhost:" + localServerPort);
  };

  prepareDocuments = function() {
    return Q.Promise(function(resolve, reject) {
      var _rmrf;
      _rmrf = function(path) {
        var _fileList;
        _fileList = fs.readdirSync(path);
        _fileList.forEach(function(file, index) {
          var filePath;
          filePath = "" + path + "/" + file;
          if (fs.statSync(filePath).isFile()) {
            return fs.unlinkSync(filePath);
          } else if (fs.statSync(filePath).isDirectory()) {
            return _rmrf(filePath);
          }
        });
        return fs.rmdirSync(path);
      };
      _rmrf('threejs.docset/Contents/Resources/Documents');
      return ncp('three.js/docs', 'threejs.docset/Contents/Resources/docs', {
        transform: function(read, write) {
          if (/\.html$/ig.test(read.path)) {
            read = read.pipe(es.replace('<script src="../../page.js"></script>', '<script src="../../page.js"></script>' + '<script src="../../offline.js"></script>')).pipe(es.replace('<script src="../../../page.js"></script>', '<script src="../../../page.js"></script>' + '<script src="../../../offline.js"></script>')).pipe(es.replace('<script src="../../../../page.js"></script>', '<script src="../../../../page.js"></script>' + '<script src="../../../../offline.js"></script>'));
          }
          return read.pipe(write);
        }
      }, function(err) {
        if (err) {
          reject(err);
        }
        fs.renameSync('threejs.docset/Contents/Resources/docs', 'threejs.docset/Contents/Resources/Documents');
        console.log('Preparation on Documents is done!');
        return resolve();
      });
    });
  };

  injectFiles = function() {
    return Q.Promise(function(resolve) {
      return ncp('files', 'threejs.docset/Contents/Resources/Documents', resolve);
    });
  };

  getPageListFromFiles = function() {
    var collectHTMLFiles, docRoot, urlList;
    docRoot = 'threejs.docset/Contents/Resources/Documents/api';
    urlList = [];
    collectHTMLFiles = function(path) {
      var item, _dirContent, _i, _len, _results;
      _dirContent = fs.readdirSync(path);
      _results = [];
      for (_i = 0, _len = _dirContent.length; _i < _len; _i++) {
        item = _dirContent[_i];
        if (/^\./.test(item)) {

        } else if (/\.html|\.htm$/i.test(item)) {
          _results.push(urlList.push(("" + path + "/" + item).replace(/^threejs\.docset\/Contents\/Resources\/Documents\//gi, '')));
        } else {
          _results.push(collectHTMLFiles("" + path + "/" + item));
        }
      }
      return _results;
    };
    collectHTMLFiles(docRoot);
    return urlList;
  };

  getPageListFromJSON = function() {
    return Q.Promise(function(resolve) {
      var grabURLFromJSON, listJsContent, urlList, _data;
      _data = {};
      urlList = [];
      listJsContent = fs.readFileSync('threejs.docset/Contents/Resources/' + 'Documents/list.js');
      vm.runInNewContext(listJsContent, _data);
      grabURLFromJSON = function(obj) {
        var i, _results;
        _results = [];
        for (i in obj) {
          if (typeof obj[i] === 'object') {
            _results.push(grabURLFromJSON(obj[i]));
          } else {
            _results.push(urlList.push(obj[i] + '.html'));
          }
        }
        return _results;
      };
      grabURLFromJSON(_data.pages);
      return resolve(urlList);
    });
  };

  getData = function(urlList) {
    return Q.Promise(function(resolve) {
      var data, _i;
      _i = 0;
      data = [];
      return phantom.create(function(ph) {
        return ph.createPage(function(page) {
          var _readPage;
          _readPage = function() {
            return page.open("http://localhost:" + localServerPort + "/" + urlList[_i], function(status) {
              return page.evaluate(function() {
                var members;
                members = [].map.call(document.querySelectorAll('a[id]'), function(el) {
                  var type;
                  type = el;
                  while (type) {
                    if (type.tagName === 'H3') {
                      break;
                    }
                    type = type.parentNode;
                  }
                  while (type) {
                    if (type.tagName === 'H2') {
                      break;
                    }
                    type = type.previousElementSibling;
                  }
                  if (type) {
                    type = (function() {
                      switch (type.innerText) {
                        case 'Properties':
                          return 'Property';
                        case 'Methods':
                          return 'Method';
                        default:
                          return false;
                      }
                    })();
                  }
                  if (type) {
                    return {
                      name: el.innerText,
                      type: type,
                      hash: el.id
                    };
                  } else {
                    return false;
                  }
                });
                members.filter(function(item) {
                  return item;
                });
                return {
                  name: document.querySelector('h1').innerHTML,
                  members: members
                };
              }, function(result) {
                var type;
                console.log(("http://localhost:" + localServerPort) + ("/" + urlList[_i] + ": " + result.name));
                type = urlList[_i].indexOf('manual/') === 0 ? 'Guide' : ~urlList[_i].indexOf('/constants/') ? 'Constant' : 'Class';
                data.push({
                  $name: result.name,
                  $type: type,
                  $path: urlList[_i]
                });
                if (result.members.length) {
                  result.members.forEach(function(member) {
                    return data.push({
                      $name: "" + result.name + "." + member.name,
                      $type: member.type,
                      $path: "" + urlList[_i] + "#" + member.hash
                    });
                  });
                }
                if (++_i < urlList.length) {
                  return _readPage();
                } else {
                  ph.exit();
                  return resolve(data);
                }
              });
            });
          };
          return _readPage();
        });
      });
    });
  };

  writeSQLite = function(data) {
    return Q.Promise(function(resolve) {
      var db, progress, writeCount;
      writeCount = 0;
      db = null;
      progress = function(isRecordAdded) {
        if (isRecordAdded) {
          writeCount++;
        }
        if (writeCount === data.length) {
          console.log('Finished writing db.');
          db.close();
          return resolve();
        }
      };
      return fs.unlink(dbFile, function() {
        db = new sqlite3.Database(dbFile);
        return db.serialize(function() {
          var item, _i, _len, _results;
          db.run("CREATE TABLE searchIndex (id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT);");
          db.run("CREATE UNIQUE INDEX anchor ON searchIndex (name, type, path);");
          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            item = data[_i];
            if (item.$name != null) {
              _results.push(db.run("INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES (?, ?, ?);", [item.$name, item.$type, item.$path], function() {
                return progress(true);
              }));
            } else {
              _results.push(progress(true));
            }
          }
          return _results;
        });
      });
    });
  };

  startLocalServer();

  prepareDocuments().then(injectFiles).then(getPageListFromJSON).then(getData).then(writeSQLite).then(function() {
    server.close();
    process.exit();
  })["catch"](function(err) {
    console.log(err);
  }).done();

}).call(this);
